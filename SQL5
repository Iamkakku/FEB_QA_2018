Sub Query
SET Operator


Sub Query

What is a sub Query ?
Why we need sub queries?
Reat time examples?
Main Query --- > Which employees have salaries greater
than Abel’s salary?
Sub Query ----- > What is Abel’s salary?

Syntax
Main query ( sub queryy - single or multiple rows)
Output of the subquery is an input to the main query.
SELECT select_list
FROM table
WHERE expr operator
(SELECT select_list
FROM table);


Sub query example
--- get name  of employee whose salary is less than Abel
SELECT last_name, salary
FROM employees
WHERE salary >
(SELECT salary
FROM employees
WHERE last_name = 'Abel');

Types of Subqueries
Single row subquery  : a sub query which returns only one result
Multiple row subquery : a sub query which returns multiple results

Single-Row Subqueries

– Return only one row
– Use single-row comparison operators  =, >, >=, <, <=, <>


--Select employee who have job id same as emp id 141 and salary same as 143

SELECT last_name, job_id, salary
FROM employees
WHERE job_id =
(SELECT job_id
FROM employees
WHERE employee_id = 141)
AND salary >
(SELECT salary
FROM employees
WHERE employee_id = 143);

Different ways of using  single- row subqueries

>>>>>>>>>>>>>>>   Using Group Functions in a Subquery
Select emp who have min salary
SELECT last_name, job_id, salary
FROM employees
WHERE salary =
(SELECT MIN(salary)
FROM employees);

>>>>>>>>>>>>>>  The HAVING Clause with Subqueries
Find the second highest salary in dept 50



# employee having salary greater than min sal in 50 department
SELECT department_id, MIN(salary)
FROM employees
GROUP BY department_id
HAVING MIN(salary) >
(SELECT MIN(salary)
FROM employees
WHERE department_id = 50);


Different ways of using  multiple - row subqueries with IN, ANY, ALL

Find the employees who have salary less than  any  itprog

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ANY
(SELECT salary
FROM employees
WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';

Find non-it employees whose salary is less than all the it prog

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ALL
(SELECT salary
FROM employees
WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';

Few examples for subqueries
# Fetch all the departments based on location = ‘ california’
Select * from locations;
Select location_id from locations where state_province = ‘california’;
Select * from departments where location-id =
(Select location_id from locations where state_province = ‘california’);

# Fetch all employees who has job_id same as employee with id 141 and salary sames
As employee with id 143
# fetch all employees who have min salary
Select all the min salary and then employees who have min salary
#fetch employee who have same salary as the minimum sal if department with id 50





Overview

-Place subqueries on the right side of the comparison condition.
-Use single-row operators with single-row subqueries, and use multiple-row
operators with multiple-row subqueries.
-multiple-row subqueries cannot be used with single row queries using = operator
SELECT employee_id, last_name
FROM employees
WHERE salary =
(SELECT MIN(salary)
FROM employees
GROUP BY department_id);
- null value subqueries. Sometimes subquery will return null. The other type is the main subquery may not produce result 
SELECT emp.last_name
FROM employees emp
WHERE emp.employee_id NOT IN
(SELECT mgr.manager_id
FROM employees mgr);



USING THE SET OPERATORS
UNION/UNION ALL
INTERSECT
MINUS
UNION OPERATOR
The UNION operator returns results from both
queries after eliminating duplications.


Display the current and previous job details of all employees. Display each employee only once.
SELECT employee_id, job_id
FROM employees
UNION
SELECT employee_id, job_id
FROM job_history;


UNION ALL OPERATOR

The UNION ALL operator returns results from both
queries, including all duplications.

#Display the current and previous departments of all employees.
SELECT employee_id, job_id, department_id
FROM employees
UNION ALL
SELECT employee_id, job_id, department_id
FROM job_history
ORDER BY employee_id;

INTERSECT OPERATOR
The INTERSECT operator returns rows that are
common to both queries.

#Display the employee IDs and job IDs of those employees who currently have a job title that is the same as their job title when they were initially hired (that is, they changed jobs but have now gone back to doing their original job).

-- intersect in Oracle is EXISTS in my sql
SELECT employee_id, job_id
FROM employees
INTERSECT
SELECT employee_id, job_id
FROM job_history;

SELECT  employee_id, first_name, job_id FROM employees
  WHERE EXISTS (SELECT * FROM job_history
                WHERE employees.employee_id = job_history.employee_id);


MINUS OPERATOR
The MINUS operator returns rows in the first query
that are not present in the second query.
# Display the employee IDs of those employees who have not changed their jobs even once.
SELECT employee_id
FROM employees
MINUS
SELECT employee_id
FROM job_history;
-- in my sql MINUS operator is not available instead we could use left join
Select * from employees left join job_history on employees.employee_id = job_history.employee_id where job_history.employee_id is NULL;

OVERVIEW
The expressions in the SELECT lists must match in number and data
type.
– Parentheses can be used to alter the sequence of execution.
– The ORDER BY clause:
• Can appear only at the very end of the statement
• Will accept the column name, aliases from the first SELECT statement, or
the positional notation


INSERT INTO departments
(department_id, department_name, location_id)
VALUES (&department_id, '&department_name',&location);



Updating Two Columns with a
Subquery

Update employee 114 job and salary to match that of employee 205
UPDATE employees
SET job_id = (SELECT job_id
FROM employees
WHERE employee_id = 205),
salary = (SELECT salary
FROM employees
WHERE employee_id = 205)
Commands in my sql workbench
select * from employees;
SELECT last_name, salary
FROM employees
WHERE salary >
(SELECT salary
FROM employees
WHERE last_name = 'Abel');

SELECT last_name, job_id, salary
FROM employees
WHERE job_id =
(SELECT job_id
FROM employees
WHERE employee_id = 141)
AND salary >
(SELECT salary
FROM employees
WHERE employee_id = 143);

SELECT last_name, job_id, salary
FROM employees
WHERE salary =
(SELECT MIN(salary)
FROM employees);

SELECT department_id, MIN(salary)
FROM employees
GROUP BY department_id
HAVING MIN(salary) >
(SELECT MIN(salary)
FROM employees
WHERE department_id = 50);

SELECT employee_id, last_name
FROM employees
WHERE salary =
(SELECT MIN(salary)
FROM employees
GROUP BY department_id);


SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ANY
(SELECT salary
FROM employees
WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary < ALL
(SELECT salary
FROM employees
WHERE job_id = 'IT_PROG')
AND job_id <> 'IT_PROG';


SELECT employee_id, job_id
FROM employees
UNION
SELECT employee_id, job_id
FROM job_history;

SELECT employee_id, job_id, department_id
FROM employees
UNION ALL
SELECT employee_id, job_id, department_id
FROM job_history
ORDER BY employee_id;

SELECT employee_id, job_id, department_id
FROM employees WHERE EMPLOYEE_ID = 
(SELECT employee_id
FROM job_history
ORDER BY employee_id);

(SELECT employee_id, job_id
FROM employees)
INTERSECT (SELECT employee_id, job_id FROM job_history);

SELECT  employee_id, first_name, job_id FROM employees
  WHERE EXISTS (SELECT * FROM job_history
                WHERE employees.employee_id = job_history.employee_id);


select * from job_history;

(SELECT employee_id
FROM employees)
MINUS (SELECT employee_id FROM job_history);

Select * from employees left join job_history on employees.employee_id = job_history.employee_id where job_history.employee_id is NULL;

INSERT INTO departments
(department_id, department_name, location_id)
VALUES (&department_id, '&department_name',&location);

UPDATE employees
SET job_id = (SELECT job_id FROM employees WHERE employee_id = 205),
	salary = (SELECT salary from employees where employee_id = 205)
where employee_id = 114;

-- update commission for all employees who are manager of 2 employees to 15% and more emp to 20%
SELECT e.last_name emp, m.last_name mgr
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id);

select count(*)  from employees where employee_id = (select e.employee_id FROM employees e JOIN employees m ON (e.manager_id = m.employee_id));

select e.employee_id, e.last_name, m.employee_id, m.last_name FROM employees e JOIN employees m ON (e.manager_id = m.employee_id);

select count(*), e.last_name 

select * from employees;

select *
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID

select B.employee_id
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID


select B.employee_id, count(*)
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) > 2

select B.employee_id, count(*)
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) <= 2

update employees set commission_pct=0.15 where employee_id IN
(select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) <= 2)

select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2

update employees set commission_pct=0.15 where employee_id=(select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2);

UPDATE employees t2,
(   select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2 
) t1
SET t2.commission_pct=0.15
WHERE t2.employee_id = t1.employee_id;
--------------------------
---------------------------------------------------------------------
-- update commission for all employees who are manager of 2 employees to 15% and more emp to 20%
FIND A IN ( x,y,z)
a=b as in (5, 6, 7) a = 5 or a = 6 or a =7
student id in (sec a, sec b, sec c)
any use comparison

SELECT e.last_name emp, m.last_name mgr
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id);

select count(*)  from employees where employee_id = (select e.employee_id FROM employees e JOIN employees m ON (e.manager_id = m.employee_id));

select e.employee_id, e.last_name, m.employee_id, m.last_name FROM employees e JOIN employees m ON (e.manager_id = m.employee_id);

select count(*), e.last_name

select * from employees;

select *
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID

select B.employee_id
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID


select B.employee_id, count(*)
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) > 2

select B.employee_id, count(*)
from employees A join employees B
where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) <= 2

update employees set commission_pct=0.15 where employee_id IN
(select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID
group by B.employee_id
having count(*) <= 2)

select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2

update employees set commission_pct=0.15 where employee_id=(select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2);

UPDATE employees t2,
(   select B.employee_id from employees A join employees B where A.MANAGER_ID = B.EMPLOYEE_ID group by B.employee_id
having count(*) <= 2
) t1
SET t2.commission_pct=0.15
WHERE t2.employee_id = t1.employee_id;




