SQL Joins
What are JOINS?
Joins help retrieving data from two or more database tables. 
The tables are mutually related using primary and foreign keys.
Primary key -  values must be unique and not null
Foreign key -  it is primary key of one table would be foreign key to another table
An identifying relationship is when the existence of a row in a child table depends on a row in a parent table like invoice depends on customer. A non-identifying relationship is when the primary key attributes of the parent must not become primary key attributes of the child. 
Why should we use joins?
Now you may think, why we use JOINs when we can do the same task running queries. Especially if you have some experience in database programming you know we can run queries one by one, use output of each in successive queries. Of course, that is possible. But using JOINs, you can get the work done by using only a one query with any search parameters. On the other hand MySQL can achieve better performance with JOINs as it can use Indexing. Simply use of single JOIN query instead running multiple queries do reduce server overhead. Using multiple queries instead that leads more data transfers between MySQL and applications (software). Further it requires more data manipulations in application end also.
It is clear that we can achieve better MySQL and application performances by use of JOINs.

some examples of when you need a join
-- Diagram for two or more tables as in our join
--  hr schema with pk and fk draw joins

Real time example
Amazon.com application website
searching for laptops based on price range,
review
it is a portal with large db, so there
will be multiple suppliers like apple, hp,
lenovo, Each supplier will have their own
database and they will share for search


Types of Joins :

1.  Natural Join 
The associated tables have one or more pairs of identically named columns. The columns must be the same data type. Donâ€™t use ON clause in a natural join.
2.  Self Join
A SELF JOIN is another type of join in SQL which is used to join a table to itself, especially when the table has a FOREIGN KEY which references its own PRIMARY KEY.To join a table itself means that each row of the table is combined with itself and with every other row of the table.
3.  Inner Join
The inner JOIN is used to return rows from both tables that satisfy the given condition.


4.  Outer Join -- left outer join and right outer join
The LEFT JOIN returns all the rows from the table on the left even if no matching rows have been found in the table on the right. Where no matches have been found in the table on the right, NULL is returned.
The RIGHT JOIN returns all the columns from the table on the right even if no matching rows have been found in the table on the left. Where no matches have been found in the table on the left, NULL is returned.

5.  Cross join / cartesian product
Cross JOIN is a simplest form of JOINs which matches each row from one database table to all rows of another.
In other words it gives us combinations of each row of first table with all records in second table.


Employee -- empid empname deptid managerid
Department --  deptid deptname managerid

Employee table    Department table
10 john 50  67        50 sales 67
20 abc  50  67        60 IT    67
30 xyz  60  67        70 admin 89
40 dfg  40  89        80 hr    89
50 hjk  50  89

Natural join - 
-they have same column name and also their data type
-if you are trying to retrieve records from the columns which have 
  same name but different data type error is returned.

select employee_id,  first_name, last_name, department_id from employees natural join departments;
It displays all  records in employees which have department id present in departments table.

pg 183
#retrieve all department with city name
SELECT department_id, department_name,
location_id, city
FROM departments
NATURAL JOIN locations ;

PG186
--  USING CLAUSE
USING clause can also be used for the same purpose. The difference with USING is it needs to have identical names for matched columns in both tables.
SELECT employees.employee_id, employees.last_name,
departments.location_id, department_id
FROM employees JOIN departments
USING (department_id);

-- with aliases name
SELECT e.employee_id, e.last_name, d.location_id, department_id 
FROM employees e JOIN departments d  USING (department_id);

-- retrieving with ON command
When the column names are different then on command can be used
SELECT e.employee_id, e.last_name, e.department_id,
d.department_id, d.location_id
FROM employees e JOIN departments d
ON (e.department_id = d.department_id);

-- Self-Joins Using the ON Clause
SELECT e.last_name emp, m.last_name mgr
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id);

--Applying Additional Conditions to a Join
SELECT e.employee_id, e.last_name, e.department_id,
d.department_id, d.location_id
FROM employees e JOIN departments d
ON (e.department_id = d.department_id)
AND e.manager_id = 149 ;

--Creating Three-Way Joins with the ON Clause
SELECT employee_id, city, department_name
FROM employees e
JOIN departments d
ON d.department_id = e.department_id
JOIN locations l
ON d.location_id = l.location_id;

-- Retrieving Records with Nonequijoins
The SQL NON EQUI JOIN uses comparison operator instead of the equal sign like >, <, >=, <= along with conditions

select * from jobs;

alter table jobs add column grade_level char;

describe jobs;

select * from jobs order by max_salary desc;

select * from jobs where job_id='AD_VP';

update jobs set grade_level='A' 
where job_id='AD_PRES';


SELECT e.last_name, e.salary, j.grade_level
FROM employees e JOIN jobs j
 ON e.salary 
BETWEEN j.min_salary AND j.max_salary;

-- Outer Joins
-- INNER Versus OUTER Joins

-- LEFT OUTER JOIN
SELECT e.last_name, e.department_id, d.department_name
FROM employees e LEFT OUTER JOIN departments d
ON (e.department_id = d.department_id) ;

-- RIGHT OUTER JOIN
SELECT e.last_name, e.department_id, d.department_name
FROM employees e RIGHT OUTER JOIN departments d
ON (e.department_id = d.department_id) ;

[ this is in oracle, it is not available in mysql] 
-- FULL OUTER JOIN
In SQL the FULL OUTER JOIN combines the results of both left and right outer joins and returns all (matched or unmatched) rows from the tables on both sides of the join clause. It adds null for non-existing values

SELECT e.last_name, d.department_id, d.department_name
FROM employees e FULL OUTER JOIN departments d
ON (e.department_id = d.department_id) ;


-- Creating Cross Joins / Cartesian product
SELECT last_name, department_name
FROM employees
CROSS JOIN departments ;

Summary
JOINS allow us to combine data from more than one table into a single result set.
JOINS have better performance compared to sub queries
INNER JOINS only return rows that meet the given criteria.
OUTER JOINS can also return rows where no matches have been found. The unmatched rows are returned with the NULL keyword.
The major JOIN types include Inner, Left Outer, Right Outer, Cross JOINS etc.
The frequently used clause in JOIN operations is "ON". "USING" clause requires that matching columns be of the same name.
JOINS can also be used in other clauses such as GROUP BY, WHERE, SUB QUERIES, AGGREGATE FUNCTIONS etc.






